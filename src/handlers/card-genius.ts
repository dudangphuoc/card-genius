//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

export class Handlers {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl ?? "";
    }

    /**
     * @param id (optional) 
     * @return Success
     */
    boardGet(id: number | undefined): Promise<BoardResponseSucceedResponseDTO> {
        let url_ = this.baseUrl + "/Board?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "Id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processBoardGet(_response);
        });
    }

    protected processBoardGet(response: Response): Promise<BoardResponseSucceedResponseDTO> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as BoardResponseSucceedResponseDTO;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<BoardResponseSucceedResponseDTO>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    boardPost(body: AddBoardCommand | undefined): Promise<AddBoardReponseSucceedResponseDTO> {
        let url_ = this.baseUrl + "/Board";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processBoardPost(_response);
        });
    }

    protected processBoardPost(response: Response): Promise<AddBoardReponseSucceedResponseDTO> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as AddBoardReponseSucceedResponseDTO;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<AddBoardReponseSucceedResponseDTO>(null as any);
    }
}

export class BoardHandlers {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl ?? "";
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    addPoint(body: AddPointCommand | undefined): Promise<BooleanSucceedResponseDTO> {
        let url_ = this.baseUrl + "/Board/add-point";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processAddPoint(_response);
        });
    }

    protected processAddPoint(response: Response): Promise<BooleanSucceedResponseDTO> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as BooleanSucceedResponseDTO;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<BooleanSucceedResponseDTO>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    removePoint(body: RemovePointCommand | undefined): Promise<BooleanSucceedResponseDTO> {
        let url_ = this.baseUrl + "/Board/remove-point";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "DELETE",
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processRemovePoint(_response);
        });
    }

    protected processRemovePoint(response: Response): Promise<BooleanSucceedResponseDTO> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as BooleanSucceedResponseDTO;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<BooleanSucceedResponseDTO>(null as any);
    }
}

export interface AddBoardCommand {
    name: string | undefined;
    first: number;
    second: number;
    third: number;
    four: number;
    max: number;
    playersName: string[] | undefined;
}

export interface AddBoardReponse {
    id: number;
    boardCreatedDate: Date;
    uniqueCode: string | undefined;
    name: string | undefined;
}

export interface AddBoardReponseSucceedResponseDTO {
    data: AddBoardReponse;
    statusCode: number;
    code: string | undefined;
    message: string | undefined;
    traceId: string | undefined;
    spanId: string | undefined;
}

export interface AddPointCommand {
    uniqueCode: string | undefined;
    round: number;
    players: PointCommand[] | undefined;
}

export interface BoardResponse {
    id: number;
    name: string | undefined;
    boardCreatedDate: Date;
    first: number;
    second: number;
    third: number;
    four: number;
    max: number;
    players: PlayerResponse;
    isEnding: boolean;
}

export interface BoardResponseSucceedResponseDTO {
    data: BoardResponse;
    statusCode: number;
    code: string | undefined;
    message: string | undefined;
    traceId: string | undefined;
    spanId: string | undefined;
}

export interface BooleanSucceedResponseDTO {
    data: boolean;
    statusCode: number;
    code: string | undefined;
    message: string | undefined;
    traceId: string | undefined;
    spanId: string | undefined;
}

export interface Column {
    playerId: number;
    playerName: string | undefined;
    totalScore: number;
}

export interface PlayerResponse {
    columns: Column[] | undefined;
    rows: { [key: string]: number[]; }[] | undefined;
}

export interface PointCommand {
    playerId: number;
    point: number;
    pt: number;
}

export interface RemovePointCommand {
    uniqueCode: string | undefined;
    round: number;
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}